logging {
	level = "info"
}

// Read logs from file that captures flog stdout
local.file_match "flog_output" {
    path_targets = [{"__path__" = "/tmp/flog.log", "__stream__" = "flog"}]
    sync_period = "5s"
}

loki.source.file "log_scrape" {
  targets    = local.file_match.flog_output.targets
  forward_to = [loki.write.grafana_loki.receiver]
  tail_from_end = false
}

loki.write "grafana_loki" {
  endpoint {
    url = "http://grafana-loki.pocpoc:3100/loki/api/v1/push"
    tenant_id = "iPaper"

    // basic_auth {
    //  username = "admin"
    //  password = "admin"
    // }
  }
}

prometheus.exporter.self "self_metrics" {
}

prometheus.scrape "self_scrape" {
  targets    = prometheus.exporter.self.self_metrics.targets
  forward_to = [prometheus.relabel.custom_labels.receiver]
}

prometheus.relabel "custom_labels" {
    forward_to = [
        prometheus.remote_write.mimir.receiver,
    ]

    rule {
        action       = "replace"
        target_label = "cycle_environment_id"
        replacement  = env("CYCLE_ENVIRONMENT_ID")
    }

    rule {
        action       = "replace"
        target_label = "cycle_instance_id"
        replacement  = env("CYCLE_INSTANCE_ID")
    }

    rule {
        action       = "replace"
        target_label = "cycle_container_id"
        replacement  = env("CYCLE_CONTAINER_IDENTIFIER")
    }

    rule {
        action       = "replace"
        target_label = "cycle_provider_location"
        replacement  = env("CYCLE_PROVIDER_LOCATION")
    }

    rule {
      action = "labeldrop"
      regex  = "instance"
    }

    rule {
      action = "labeldrop"
      regex  = "job"
    }
}

prometheus.exporter.unix "linux_exporter" {
  disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
  enable_collectors = ["meminfo"]

  filesystem {
    fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
    mount_timeout        = "5s"
  }

  netclass {
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }

  netdev {
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
}

prometheus.scrape "linux_exporter_scrape" {
  targets    = prometheus.exporter.unix.linux_exporter.targets
  forward_to = [prometheus.remote_write.mimir.receiver]
}

prometheus.remote_write "mimir" {
  endpoint {
    url = "http://grafana-mimir.pocpoc:9009/api/v1/push"
  }
}