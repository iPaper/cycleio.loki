logging {
	level = "info"
}

// Read logs from file that captures flog stdout
local.file_match "flog_output" {
    path_targets = [{"__path__" = "/tmp/flog.log", "__stream__" = "flog"}]
    sync_period = "5s"
}

loki.source.file "log_scrape" {
  targets    = local.file_match.flog_output.targets
  forward_to = [loki.write.grafana_loki.receiver]
  tail_from_end = false
}

loki.write "grafana_loki" {
  endpoint {
    url = "http://grafana-loki.pocpoc:3100/loki/api/v1/push"
    tenant_id = "iPaper"

    // basic_auth {
    //  username = "admin"
    //  password = "admin"
    // }
  }
}

prometheus.exporter.self "self_metrics" {
}

prometheus.scrape "self_scrape" {
  targets    = prometheus.exporter.self.self_metrics.targets
  forward_to = [prometheus.relabel.custom_labels.receiver]
}

prometheus.exporter.unix "linux_exporter" {
  disable_collectors = [] // Enable only default unix collectors
  enable_collectors = [] // Enable only default unix collectors
}

prometheus.scrape "linux_exporter_scrape" {
  targets    = prometheus.exporter.unix.linux_exporter.targets
  forward_to = [otelcol.receiver.prometheus.linux_metrics.receiver]
}

// Convert Prometheus metrics to OTEL format so we can modify descriptions
otelcol.receiver.prometheus "linux_metrics" {
  output {
    metrics = [otelcol.processor.transform.add_descriptions.input]
  }
}

// Transform metric descriptions
otelcol.processor.transform "add_descriptions" {
  error_mode = "ignore"

  metric_statements {
    context = "metric"
    statements = [
      `set(metric.description, "Total available memory in bytes for the Linux host.") where metric.name == "node_memory_MemTotal_bytes"`,
      `set(metric.description, "Available free memory in bytes on the Linux host.") where metric.name == "node_memory_MemFree_bytes"`,
    ]
  }

  output {
    metrics = [otelcol.exporter.prometheus.back_to_prometheus.input]
  }
}

// Convert back to Prometheus format
otelcol.exporter.prometheus "back_to_prometheus" {
  forward_to = [prometheus.relabel.custom_labels.receiver]
}

prometheus.relabel "custom_labels" {
    forward_to = [
        prometheus.remote_write.mimir.receiver,
    ]


    // Adding labels to all metrics for better filtering in Grafana.
    // These are sourced from environment variables that are set by our cloud provider (Cycle.io)
    rule {
        action       = "replace"
        target_label = "cycle_environment_id"
        replacement  = env("CYCLE_ENVIRONMENT_ID")
    }

    rule {
        action       = "replace"
        target_label = "cycle_instance_id"
        replacement  = env("CYCLE_INSTANCE_ID")
    }

    rule {
        action       = "replace"
        target_label = "cycle_container_id"
        replacement  = env("CYCLE_CONTAINER_IDENTIFIER")
    }

    rule {
        action       = "replace"
        target_label = "cycle_provider_location"
        replacement  = env("CYCLE_PROVIDER_LOCATION")
    }

    // Deleting default labels as we have added our own which are more descriptive.
    rule {
      action = "labeldrop"
      regex  = "instance"
    }

    rule {
      action = "labeldrop"
      regex  = "job"
    }
}

prometheus.remote_write "mimir" {
  endpoint {
    url = "http://grafana-mimir.pocpoc:9009/api/v1/push"
  }
}