{
  "version": "1.0",
  "about": {
    "description": "Generated from a docker compose file for use on Cycle.io.",
    "version": ""
  },
  "containers": {
    "read": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "read",
          "ports": [
            "3101:3100",
            "7946",
            "9095"
          ]
        },
        "deploy": {
          "instances": 1,
          "health_check": {
            "command": "\"wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1\"",
            "retries": 5,
            "interval": "10s",
            "timeout": "5s",
            "restart": true,
            "delay": "0s"
          }
        },
        "runtime": {
          "command": {
            "path": "-config.file=/etc/loki/config.yaml",
            "args": "-target=read"
          }
        }
      },
      "name": "read",
      "image": {
        "origin": {
          "type": "docker-file",
          "details": {
            "context_dir": "/loki",
            "build_file": "/loki/Dockerfile"
          }
        }
      },
      "stateful": true,
      "volumes": [
        {
          "destination": "/etc/loki/config.yaml",
          "read_only": false,
          "local": {
            "max_size": "5GB"
          }
        }
      ]
    },
    "write": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "write",
          "ports": [
            "3102:3100",
            "7946",
            "9095"
          ]
        },
        "deploy": {
          "instances": 1,
          "health_check": {
            "command": "\"wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1\"",
            "retries": 5,
            "interval": "10s",
            "timeout": "5s",
            "restart": true,
            "delay": "0s"
          }
        },
        "runtime": {
          "command": {
            "path": "-config.file=/etc/loki/config.yaml",
            "args": "-target=write"
          }
        }
      },
      "name": "write",
      "image": {
        "origin": {
          "type": "docker-file",
          "details": {
            "context_dir": "/loki",
            "build_file": "/loki/Dockerfile"
          }
        }
      },
      "stateful": true,
      "volumes": [
        {
          "destination": "/etc/loki/config.yaml",
          "read_only": false,
          "local": {
            "max_size": "5GB"
          }
        }
      ]
    },
    "alloy": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "alloy",
          "ports": [
            "12345:12345"
          ]
        },
        "deploy": {
          "instances": 1
        },
        "runtime": {
          "command": {
            "path": "run",
            "args": "--server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy"
          }
        }
      },
      "name": "alloy",
      "image": {
        "origin": {
          "type": "docker-hub",
          "details": {
            "target": "grafana/alloy:latest"
          }
        }
      },
      "stateful": true,
      "volumes": [
        {
          "destination": "/etc/alloy/config.alloy",
          "read_only": true,
          "local": {
            "max_size": "5GB"
          }
        }
      ]
    },
    "minio": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "minio",
          "ports": [
            "9000"
          ]
        },
        "deploy": {
          "instances": 1,
          "health_check": {
            "command": "curl -f http://localhost:9000/minio/health/live",
            "retries": 5,
            "interval": "15s",
            "timeout": "20s",
            "restart": true,
            "delay": "0s"
          }
        },
        "runtime": {
          "command": {
            "path": "sh",
            "args": "-euc mkdir -p /data/loki-data && \\\nmkdir -p /data/loki-ruler && \\\nminio server /data\n"
          },
          "environment_vars": {
            "MINIO_ROOT_USER": "loki",
            "MINIO_ROOT_PASSWORD": "supersecret",
            "MINIO_PROMETHEUS_AUTH_TYPE": "public",
            "MINIO_UPDATE": "off"
          }
        }
      },
      "name": "minio",
      "image": {
        "origin": {
          "type": "docker-hub",
          "details": {
            "target": "minio/minio"
          }
        }
      },
      "stateful": true,
      "volumes": [
        {
          "destination": "/data",
          "read_only": false,
          "local": {
            "max_size": "5GB"
          }
        }
      ]
    },
    "grafana": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "grafana",
          "ports": [
            "3000:3000"
          ]
        },
        "deploy": {
          "instances": 1,
          "health_check": {
            "command": "\"wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1\"",
            "retries": 5,
            "interval": "10s",
            "timeout": "5s",
            "restart": true,
            "delay": "0s"
          }
        },
        "runtime": {
          "command": {
            "path": "sh",
            "args": "-euc mkdir -p /etc/grafana/provisioning/datasources\ncat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml\napiVersion: 1\ndatasources:\n  - name: Loki\n    type: loki\n    access: proxy\n    url: http://gateway:3100\n    jsonData:\n      httpHeaderName1: \"X-Scope-OrgID\"\n    secureJsonData:\n      httpHeaderValue1: \"iPaper\"\nEOF\n/run.sh\n"
          },
          "environment_vars": {
            "GF_PATHS_PROVISIONING": "/etc/grafana/provisioning",
            "GF_AUTH_ANONYMOUS_ENABLED": "true",
            "GF_AUTH_ANONYMOUS_ORG_ROLE": "Admin"
          }
        }
      },
      "name": "grafana",
      "image": {
        "origin": {
          "type": "docker-hub",
          "details": {
            "target": "grafana/grafana:latest"
          }
        }
      },
      "stateful": false
    },
    "backend": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "backend",
          "ports": [
            "3100:3100",
            "7946:7946"
          ]
        },
        "deploy": {
          "instances": 1
        },
        "runtime": {
          "command": {
            "path": "-config.file=/etc/loki/config.yaml",
            "args": "-target=backend -legacy-read-mode=false"
          }
        }
      },
      "name": "backend",
      "image": {
        "origin": {
          "type": "docker-file",
          "details": {
            "context_dir": "/loki",
            "build_file": "/loki/Dockerfile"
          }
        }
      },
      "stateful": true,
      "volumes": [
        {
          "destination": "/etc/loki/config.yaml",
          "read_only": false,
          "local": {
            "max_size": "5GB"
          }
        }
      ]
    },
    "gateway": {
      "config": {
        "network": {
          "public": "enable",
          "hostname": "gateway",
          "ports": [
            "3100:3100"
          ]
        },
        "deploy": {
          "instances": 1,
          "health_check": {
            "command": "service nginx status",
            "retries": 5,
            "interval": "10s",
            "timeout": "5s",
            "restart": true,
            "delay": "0s"
          }
        },
        "runtime": {
          "command": {
            "path": "sh",
            "args": "-euc cat <<EOF > /etc/nginx/nginx.conf\nuser  nginx;\nworker_processes  5;  ## Default: 1\n\nevents {\n  worker_connections   1000;\n}\n\nhttp {\n  resolver 127.0.0.11;\n\n  server {\n    listen             3100;\n\n    location = / {\n      return 200 'OK';\n      auth_basic off;\n    }\n\n    location = /api/prom/push {\n      proxy_pass       http://write:3100\\$$request_uri;\n    }\n\n    location = /api/prom/tail {\n      proxy_pass       http://read:3100\\$$request_uri;\n      proxy_set_header Upgrade \\$$http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n    }\n\n    location ~ /api/prom/.* {\n      proxy_pass       http://read:3100\\$$request_uri;\n    }\n\n    location = /loki/api/v1/push {\n      proxy_pass       http://write:3100\\$$request_uri;\n    }\n\n    location = /loki/api/v1/tail {\n      proxy_pass       http://read:3100\\$$request_uri;\n      proxy_set_header Upgrade \\$$http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n    }\n\n    location ~ /loki/api/.* {\n      proxy_pass       http://read:3100\\$$request_uri;\n    }\n  }\n}\nEOF\n/docker-entrypoint.sh nginx -g \"daemon off;\"\n"
          }
        }
      },
      "name": "gateway",
      "image": {
        "origin": {
          "type": "docker-hub",
          "details": {
            "target": "nginx:latest"
          }
        }
      },
      "stateful": false
    },
    "flog": {
      "config": {
        "network": {
          "public": "disable",
          "hostname": "flog"
        },
        "deploy": {
          "instances": 1
        },
        "runtime": {
          "command": {
            "path": "-f",
            "args": "json -d 200ms -l"
          }
        }
      },
      "name": "flog",
      "image": {
        "origin": {
          "type": "docker-hub",
          "details": {
            "target": "mingrammer/flog:latest"
          }
        }
      },
      "stateful": false
    }
  }
}